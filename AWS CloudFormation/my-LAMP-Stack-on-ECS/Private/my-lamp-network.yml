AWSTemplateFormatVersion: "2010-09-09"

Description: A network stack for my-Lamp-Stack-on-ECS project. 

Resources:
  
  #Create VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.30.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'


  #Create public subnet in each of the 3 AZ
  myPublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.30.1.0/26
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
  myPublicSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.30.1.64/26
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
  myPublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.30.1.128/26
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'


  #Create private subnet in each of the 3 AZ
  myPrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.30.2.0/23
      VpcId: !Ref myVPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
  myPrivateSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.30.4.0/23
      VpcId: !Ref myVPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
  myPrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.30.6.0/23
      VpcId: !Ref myVPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'


  #Create internet gateway and attach it with myVPC
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC

  #Create Elastic IP for NAT Gateway
  myEIP:
    Type: AWS::EC2::EIP

  #Create NAT gateway and asociate it with myEIP
  myNatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: myEIP
    Properties: 
      AllocationId: !GetAtt myEIP.AllocationId
      SubnetId: !Ref myPublicSubnet1a


  #Create Public & Private route table
  myRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
  myRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC


  #Associate public route table with public subnets
  mySubnetRouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTablePublic
      SubnetId: !Ref myPublicSubnet1a
  mySubnetRouteTableAssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTablePublic
      SubnetId: !Ref myPublicSubnet1b
  mySubnetRouteTableAssociationPublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTablePublic
      SubnetId: !Ref myPublicSubnet1c
  

  #Associate private route table with private subnets
  mySubnetRouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTablePrivate
      SubnetId: !Ref myPrivateSubnet1a
  mySubnetRouteTableAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTablePrivate
      SubnetId: !Ref myPrivateSubnet1b
  mySubnetRouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTablePrivate
      SubnetId: !Ref myPrivateSubnet1c

  
  #Create internet gateway route for public route table
  myRouteFromGatewayToInternet:
    Type: AWS::EC2::Route
    DependsOn: myInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref myRouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  #Create NAT gateway route for private route table
  myRoutetoNATGateway:
    Type: AWS::EC2::Route
    DependsOn: myNatGateway
    Properties:
      RouteTableId: !Ref myRouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNatGateway






#Outputs for other stacks
Outputs:

  myVPCID:
    Description: The ID for myVPC
    Value: !Ref myVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
      
  
  myPublicSubnet1aID:
    Description: The ID for Public Subnet 1a
    Value: !Ref myPublicSubnet1a
    Export:
      Name: !Sub "${AWS::StackName}-SubnetID-PublicSubnet1a"
  myPublicSubnet1bID:
    Description: The ID for Public Subnet 1b
    Value: !Ref myPublicSubnet1b
    Export:
      Name: !Sub "${AWS::StackName}-SubnetID-PublicSubnet1b"
  myPublicSubnet1cID:
    Description: The ID for Public Subnet 1c
    Value: !Ref myPublicSubnet1c
    Export:
      Name: !Sub "${AWS::StackName}-SubnetID-PublicSubnet1c"
  myPrivateSubnet1aID:
    Description: The ID for Private Subnet 1a
    Value: !Ref myPrivateSubnet1a
    Export:
      Name: !Sub "${AWS::StackName}-SubnetID-PrivateSubnet1a"
  myPrivateSubnet1bID:
    Description: The ID for Private Subnet 1b
    Value: !Ref myPrivateSubnet1b
    Export:
      Name: !Sub "${AWS::StackName}-SubnetID-PrivateSubnet1b"
  myPrivateSubnet1cID:
    Description: The ID for Private Subnet 1c
    Value: !Ref myPrivateSubnet1c
    Export:
      Name: !Sub "${AWS::StackName}-SubnetID-PrivateSubnet1c"



      